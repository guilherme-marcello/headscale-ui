{"version":3,"sources":["..\\electron\\preload.ts"],"sourcesContent":["import { ipcRenderer, contextBridge } from 'electron';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    Main: typeof api;\r\n    ipcRenderer: typeof ipcRenderer;\r\n  }\r\n}\r\n\r\nconst api = {\r\n  /**\r\n   * Here you can expose functions to the renderer process\r\n   * so they can interact with the main (electron) side\r\n   * without security problems.\r\n   *\r\n   * The function below can accessed using `window.Main.sayHello`\r\n   */\r\n  sendMessage: (message: string) => {\r\n    ipcRenderer.send('message', message);\r\n  },\r\n  /**\r\n    Here function for AppBar\r\n   */\r\n  Minimize: () => {\r\n    ipcRenderer.send('minimize');\r\n  },\r\n  Maximize: () => {\r\n    ipcRenderer.send('maximize');\r\n  },\r\n  Close: () => {\r\n    ipcRenderer.send('close');\r\n  },\r\n  /**\r\n   * Provide an easier way to listen to events\r\n   */\r\n  on: (channel: string, callback: (data: any) => void) => {\r\n    ipcRenderer.on(channel, (_, data) => callback(data));\r\n  }\r\n};\r\ncontextBridge.exposeInMainWorld('Main', api);\r\n/**\r\n * Using the ipcRenderer directly in the browser through the contextBridge ist not really secure.\r\n * I advise using the Main/api way !!\r\n */\r\ncontextBridge.exposeInMainWorld('ipcRenderer', ipcRenderer);"],"mappings":"AAAA,sBAA2C;AAS3C,MAAM,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQV,aAAa,CAAC,YAAoB;AAChC,gCAAY,KAAK,WAAW,OAAO;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU,MAAM;AACd,gCAAY,KAAK,UAAU;AAAA,EAC7B;AAAA,EACA,UAAU,MAAM;AACd,gCAAY,KAAK,UAAU;AAAA,EAC7B;AAAA,EACA,OAAO,MAAM;AACX,gCAAY,KAAK,OAAO;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,CAAC,SAAiB,aAAkC;AACtD,gCAAY,GAAG,SAAS,CAAC,GAAG,SAAS,SAAS,IAAI,CAAC;AAAA,EACrD;AACF;AACA,8BAAc,kBAAkB,QAAQ,GAAG;AAK3C,8BAAc,kBAAkB,eAAe,2BAAW;","names":[],"file":"preload.js"}